"""
Writes numbers generated by NumberGenerator and stores them into a file (problem 5)
"""

import time
from queue import PriorityQueue
from src.NumberGeneratorNew import NumberGenerator
import threading

'''
Writer for Number Generator
'''

class NumberWriter:
    """
    Writer for NumberGenerator
    """

    def __init__(self, filename="numbers.log", threadcount=5):
        self.filename = filename
        self.threadcount = threadcount
        #priority queue to store the number and timestamps
        self.queue = PriorityQueue()
        self.number_thread = []
        self.writer_thread = None
        self.start_generators()
        self.start_file_writer()
        self.wait_until_complete()

    def start_generators(self):
        """
        Spins up number of NumberGeneratorThreads
        """
        for _ in range(self.threadcount):
            generator = NumberGenerator()
            t = threading.Thread(target=generator.generate_numbers, args=(self.store_gen_num,))
            t.daemon=True
            t.start()
            self.number_thread.append(t)

    def store_gen_num(self, gen_num):
      """
      Stores the generated timestamp and number into the priority queue, ordered based on timestamp
      """
      print(gen_num)
      self.queue.put(gen_num)

    def start_file_writer(self):
        """
        Thread which writes queue values into file
        """
        t = threading.Thread(target=self.write_to_file_worker)
        t.daemon = True
        self.writer_thread = t
        t.start()

    def wait_until_complete(self):
        """
        Waits until all thread are complete
        """
        for x in range(len(self.number_thread)):
            self.number_thread[x].join()
        self.writer_thread.join()

    def write_to_file_worker(self):
        """
        Writes number and time to file
        """
        count = 0
        #stops running if nothing is in queue for 3 seconds
        while True and count < 3:
            if self.queue.empty():
                time.sleep(1)
                count += 1
            else:
                #wait a second before getting the values to make sure that numbers are in chronological order
                #since program writes too quickly to file
                time.sleep(1)
                item = self.queue.get()
                count = 0
                with open(self.filename, 'a') as f:
                    f.write('{},{}\n'.format(item[1],item[0]))
                f.close()

    def get_num_from_queue(self):
        return self.queue.get()

    def generateNum(self):
        """
        generates a number every 2 seconds
        """
        while True:
            self.ret_rand_num()
            time.sleep(2)